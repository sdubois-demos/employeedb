openapi: 3.0.3
info:
  title: Employee API
  description: API for managing employees
  version: 1.0.0
servers:
  - url: https://edb.apps.fortidemo.net
  - url: https://edb.apps-int.fortidemo.net
paths:
  /api/employees:
    get:
      summary: Get all employees
      operationId: getAllEmployees
      parameters:
        - name: debug
          in: header
          required: false
          schema:
            type: boolean
        - name: size
          in: header
          required: false
          schema:
            type: integer
        - name: limit
          in: query
          required: false
          schema:
            type: integer
          description: The maximum number of employees to return
        - name: offset
          in: query
          required: false
          schema:
            type: integer
          description: The number of employees to skip before returning results
        - name: sort_by
          in: query
          required: false
          schema:
            type: string
            enum: [id, first_name, last_name, email, -id, -first_name, -last_name, -email]
          description: Sort employees by the given field. Prefix with '-' for descending order.
      responses:
        '200':
          description: A list of employees sorted by the specified criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Employee'
    post:
      summary: Create new employees (bulk)
      operationId: createEmployees
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Employee'
      responses:
        '201':
          description: Employees created successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Employee'
    delete:
      summary: Delete all employees
      operationId: deleteAllEmployees
      responses:
        '204':
          description: All employees deleted successfully

  /api/employee/{id}:
    get:
      summary: Get employee by ID (path param)
      operationId: getEmployeeById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Employee details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
        '404':
          description: Employee not found
    put:
      summary: Update employee by ID (path param)
      operationId: updateEmployeeById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Employee'
      responses:
        '200':
          description: Employee updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
        '404':
          description: Employee not found
    delete:
      summary: Delete employee by ID (path param)
      operationId: deleteEmployeeById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Employee deleted successfully
        '404':
          description: Employee not found

  /api/employee:
    get:
      summary: Get employee by ID (query param)
      operationId: getEmployeeByIdQuery
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Employee found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
        '404':
          description: Employee not found

    put:
      summary: Update employee by ID (query param)
      operationId: updateEmployeeByIdQuery
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Employee'
      responses:
        '200':
          description: Employee updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
        '404':
          description: Employee not found

    delete:
      summary: Delete employee by ID (query param)
      operationId: deleteEmployeeByIdQuery
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Employee deleted successfully
        '404':
          description: Employee not found

components:
  schemas:
    Employee:
      type: object
      properties:
        id:
          type: integer
          example: 1
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        email:
          type: string
          format: email
          example: johndoe@example.com

